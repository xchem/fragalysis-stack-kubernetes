---

# Iterates through the list of applications (URLs).
# If there are failures (at the end) the playbook fails.
#
# Errors are optionally sent to Slack and
# are written to the {{ application_error_filename }} file.
#Â A heartbeat file is created to ensure that slack messages
# are sent at the defined interval to reassure the user the
# playbook is still running.

- name: Display Ansible version
  debug:
    var: ansible_version.full

- name: Include sensitive variables
  ansible.builtin.include_vars:
    file: sensitive.vault

- name: Check failure file
  ansible.builtin.stat:
    path: "{{ application_error_filename }}"
  register: ae_file

- name: Get error file content
  set_fact:
    existing_error: "{{ lookup('ansible.builtin.file', application_error_filename) }}"
  when:
  - ae_file.stat.exists
  - ae_file.stat.isreg

- name: Display existing error
  debug:
    var: existing_error
  when: existing_error is defined

- name: Initialise failed applications fact
  set_fact:
    failed_applications: []

- name: Check application
  include_tasks: check-application.yaml
  loop: "{{ applications }}"

- name: Handle failed applications
  when: failed_applications | length > 0
  block:

  - name: Display failed applications fact
    debug:
      var: failed_applications

  # If the error has changed, report the new error on Slack

  - name: Alert slack channel
    slack:
      token: "{{ slack_token }}"
      username: 'Ansible on {{ inventory_hostname }}'
      validate_certs: no
      blocks:
      - type: section
        text:
          type: mrkdwn
          text: |
            *Automated alert from the Ansible Application Checker*
      - type: section
        text:
          type: mrkdwn
          text: |
            *The following applications are exhibiting errors:*
            {% for app in failed_applications %}
            - {{ app.name }} ({{ app.url }})
            {% endfor %}
    when:
    - existing_error is not defined or existing_error != failed_applications
    - slack_token | length > 0

  - name: Write error file
    ansible.builtin.copy:
      content: "{{ failed_applications | to_nice_json }}"
      dest: "{{ application_error_filename }}"
      mode: '0644'

  - name: Touch (reset) heartbeat file (on error)
    ansible.builtin.file:
      path: "{{ heartbeat_filename }}"
      state: touch
    when: slack_token | length > 0

- name: Handle error recovery
  when:
  - existing_error is defined
  - failed_applications | length == 0
  block:

  - name: Issue error clearance message
    slack:
      token: "{{ slack_token }}"
      validate_certs: no
      blocks:
      - type: section
        text:
          type: mrkdwn
          text: |
            *Automated clearance from the Ansible Application Checker*
      - type: section
        text:
          type: mrkdwn
          text: |
            *Application errors have now cleared*
    when: slack_token | length > 0

  - name: Remove application error file
    ansible.builtin.file:
      path: "{{ application_error_filename }}"
      state: absent

  - name: Touch (reset) heartbeat file (on clearance)
    ansible.builtin.file:
      path: "{{ heartbeat_filename }}"
      state: touch
    when: slack_token | length > 0

# Heartbeat (to Slack)
# (if we've said nothing for the defined period)

- name: Heartbeat
  when: slack_token | length > 0
  block:

  - name: Check heartbeat file
    ansible.builtin.stat:
      path: "{{ heartbeat_filename }}"
    register: hb_file

  - name: Touch heartbeat file
    ansible.builtin.file:
      path: "{{ heartbeat_filename }}"
      state: touch
    when: not hb_file.stat.exists

#  - name: Determine if we need to send a heartbeat
#    set_fact:
#      send_heartbeat: "{{ (now(utc=true) - (hb_file.stat.ctime | int)) | int('hours') > heartbeat_interval_hours }}"
#    when: hb_file.stat.exists

  - name: Issue heartbeat message
    slack:
      token: "{{ slack_token }}"
      validate_certs: no
      blocks:
      - type: section
        text:
          type: mrkdwn
          text: |
            *Automated HEARTBEAT from the Ansible Application Checker*
            - This is a heartbeat message from the application checker
            - There are no new errors, and nothing has cleared
            - Exhibited errors are still in effect until cleared
    when: send_heartbeat is defined

  - name: Touch (reset) heartbeat file
    ansible.builtin.file:
      path: "{{ heartbeat_filename }}"
      state: touch
    when: send_heartbeat is defined
