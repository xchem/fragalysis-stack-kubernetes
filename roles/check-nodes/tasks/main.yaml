---

# Finds all the nodes in the cluster and checks that they are 'Ready'.

- name: Display Ansible version
  debug:
    var: ansible_version.full

- name: Include sensitive variables
  ansible.builtin.include_vars:
    file: sensitive.vault

- name: Check cluster name
  assert:
    that:
    - cluster != 'SetMe'

- name: Set heartbeat filename
  set_fact:
    heartbeat_filename: "check-nodes.heartbeat"

- name: Set node error filename
  set_fact:
    node_error_filename: "check-nodes-{{ cluster | lower }}-error.txt"

- name: Check error file
  ansible.builtin.stat:
    path: "{{ node_error_filename }}"
  register: ne_file

- name: Get error file content
  set_fact:
    existing_error: "{{ lookup('ansible.builtin.file', node_error_filename) }}"
  when:
  - ne_file.stat.exists
  - ne_file.stat.isreg

- name: Display existing error
  debug:
    var: existing_error
  when: existing_error is defined

- name: Get node information
  kubernetes.core.k8s_info:
    kind: Node
    api_key: "{{ k8s_auth[cluster].api_key }}"
    host: "{{ k8s_auth[cluster].host }}"
    validate_certs: "{{ k8s_auth[cluster].verify_ssl | default('no', true) }}"
  register: node_result

- name: Initialise unready nodes fact
  set_fact:
    unready_nodes: []

- name: Check node
  include_tasks: check-node.yaml
  loop: "{{ node_result.resources }}"
  no_log: yes

# Handle unready nodes if there's no existing error or the error has changed.

- name: Handle unready nodes
  when: unready_nodes | length > 0
  block:

  - name: Display unready_nodes fact
    debug:
      var: unready_nodes

  # If the error has changed, report the new error on Slack

  - name: Alert (new error state)
    when: existing_error is not defined or existing_error != unready_nodes
    block:

    - name: Alert slack channel (unready nodes)
      slack:
        token: "{{ slack_token }}"
        validate_certs: no
        blocks:
        - type: section
          text:
            type: mrkdwn
            text: |
              *Automated alert from the Ansible Node Checker ({{ cluster | upper }} Cluster)*
        - type: section
          text:
            type: mrkdwn
            text: |
              *The following {{ cluster | upper }} nodes are not reporting as READY:*

              {% for node in unready_nodes %}
              - {{ node }}
              {% endfor %}
      when:
      - not suppress_alerts | bool
      - slack_token | length > 0

    - name: Touch (reset) heartbeat file (new error state)
      ansible.builtin.file:
        path: "{{ heartbeat_filename }}"
        state: touch
      when: slack_token | length > 0

    - name: Write error file (new error state)
      ansible.builtin.copy:
        content: "{{ unready_nodes | to_nice_json }}"
        dest: "{{ node_error_filename }}"
        mode: '0644'

# Handle the situation where errors have cleared?

- name: Handle error recovery
  when:
  - existing_error is defined
  - unready_nodes | length == 0
  block:

  - name: Issue error clearance message
    slack:
      token: "{{ slack_token }}"
      validate_certs: no
      blocks:
      - type: section
        text:
          type: mrkdwn
          text: |
            *Automated clearance from the Ansible Node Checker ({{ cluster | upper }} Cluster)*
      - type: section
        text:
          type: mrkdwn
          text: |
            *All {{ cluster | upper }} nodes are now reporting as READY*
    when:
    - not suppress_alerts | bool
    - slack_token | length > 0

  - name: Remove application error file
    ansible.builtin.file:
      path: "{{ node_error_filename }}"
      state: absent

  - name: Touch (reset) heartbeat file (on clearance)
    ansible.builtin.file:
      path: "{{ heartbeat_filename }}"
      state: touch
    when: slack_token | length > 0

# Heartbeat (to Slack)
# (if we've said nothing for the defined period)

- name: Heartbeat
  when: slack_token | length > 0
  block:

  - name: Check heartbeat file
    ansible.builtin.stat:
      path: "{{ heartbeat_filename }}"
    register: hb_file

  - name: Touch heartbeat file (if not present)
    ansible.builtin.file:
      path: "{{ heartbeat_filename }}"
      state: touch
    when: not hb_file.stat.exists

  - name: Check for out-of-date heartbeat file
    find:
      paths: .
      file_type: file
      age: "{{ heartbeat_interval_hours }}h"
      patterns: "{{ heartbeat_filename }}"
    register: old_hb_file

  - name: Issue heartbeat message
    when: old_hb_file.matched > 0
    block:

    - name: Issue heartbeat message
      slack:
        token: "{{ slack_token }}"
        validate_certs: no
        blocks:
        - type: section
          text:
            type: mrkdwn
            text: |
              *Automated HEARTBEAT from the Ansible Node Checker*
              - This is only a heartbeat message
              - It is sent to reassure you that the playbook is still running
              - It is sent after every {{ heartbeat_interval_hours }} hours of inactivity
      when: not suppress_alerts | bool

    - name: Touch (old) heartbeat file
      ansible.builtin.file:
        path: "{{ heartbeat_filename }}"
        state: touch
